######################################################################
#  Copyright (c) 2008-2015, Alliance for Sustainable Energy.
#  All rights reserved.
#
#  This library is free software; you can redistribute it and/or
#  modify it under the terms of the GNU Lesser General Public
#  License as published by the Free Software Foundation; either
#  version 2.1 of the License, or (at your option) any later version.
#
#  This library is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#  Lesser General Public License for more details.
#
#  You should have received a copy of the GNU Lesser General Public
#  License along with this library; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
######################################################################

######################################################################
# == Synopsis
#
#   Uses the aws-sdk gem to communicate with AWS
#
# == Usage
#
#  ruby aws.rb access_key secret_key us-east-1 EC2 launch_server "{\"instance_type\":\"t1.micro\"}"
#  ruby aws.rb access_key secret_key us-east-1 EC2 launch_server "{\"openstudio_version\":\"1.7.1\"}"
#
#  ARGV[0] - Access Key
#  ARGV[1] - Secret Key
#  ARGV[2] - Region
#  ARGV[3] - Service (e.g. "EC2" or "CloudWatch")
#  ARGV[4] - Command (e.g. "launch_server")
#  ARGV[5] - Optional json with parameters associated with command
#
######################################################################

# TODO: cull down this include list
# TODO: we can remove the EC2/CloudWatch parameter. The Gem takes care of this
require 'openstudio-aws'
require 'json'
require 'logger'
require 'time'
require 'cgi'
require 'net/ssh/proxy/http'

def error(code, msg)
  puts ({
           error: {
               code: code,
               message: msg
           },
           arguments: ARGV[2..-1]
       }.to_json)
  exit 1
end

error(-1, 'Invalid number of args') if ARGV.length < 5

if ARGV[0].empty? || ARGV[1].empty?
  error(401, 'Missing authentication arguments')
end

error(-1, 'Missing region argument') if ARGV[2].empty?

error(-1, 'Missing service argument') if ARGV[3].empty?

error(-1, 'Missing command argument') if ARGV[4].empty?

def get_proxy_user
  ENV['HTTP_PROXY_USER']
end

def get_proxy_user_escaped
  user = get_proxy_user
  user = CGI.escape(user) if user

  user
end

def get_proxy_pass
  ENV['HTTP_PROXY_PASS']
end

def get_proxy_pass_escaped
  pass = get_proxy_pass
  pass = CGI.escape(pass) if pass

  pass
end

def get_proxy_user_info_escaped
  user = get_proxy_user_escaped
  pass = get_proxy_pass_escaped

  return "#{user}:#{pass}" if user && pass && !pass.empty?

  return user if user

  nil
end

def get_proxy_port
  proxy_uri = ENV['HTTP_PROXY']
  if proxy_uri
    uri = URI.parse(proxy_uri)
    return uri.port
  else
    return nil
  end
end

def get_proxy_host
  proxy_uri = ENV['HTTP_PROXY']
  if proxy_uri
    uri = URI.parse(proxy_uri)
    return uri.host
  else
    return nil
  end
end

def get_proxy_uri
  if get_proxy_host
    return URI::Generic.new('http', get_proxy_user_info_escaped, get_proxy_host, get_proxy_port, nil, nil, nil, nil, nil).to_s
  else
    return nil
  end
end

def get_proxy
  if get_proxy_host
    proxy = Net::SSH::Proxy::HTTP.new(get_proxy_host, get_proxy_port, user: get_proxy_user, password: get_proxy_pass)
    return proxy
  else
    return nil
  end
end

if ARGV.length == 6
  @params = JSON.parse(ARGV[5])
  OPENSTUDIO_VERSION = @params['openstudio_version'] if @params.include?('openstudio_version')
  @server_image_id = @params['server_ami'] if @params.include?('server_ami')
  @worker_image_id = @params['worker_ami'] if @params.include?('worker_ami')
end

OPENSTUDIO_VERSION = '${CMAKE_VERSION_MAJOR}.${CMAKE_VERSION_MINOR}.${CMAKE_VERSION_PATCH}' unless defined?(OPENSTUDIO_VERSION)

aws_options = {
    credentials: {
        access_key_id: ARGV[0],
        secret_access_key: ARGV[1],
        region: ARGV[2],
        ssl_verify_peer: false
    },
    ami_lookup_version: 2,
    openstudio_version: OPENSTUDIO_VERSION,
    stable: true
}

if get_proxy_uri
  aws_options[:proxy] = {
      host: get_proxy_host,
      port: get_proxy_port,
      username: get_proxy_user,
      password: get_proxy_pass
  }
end

@aws = OpenStudio::Aws::Aws.new(aws_options)

# set the AMI images
@server_image_id = @aws.default_amis[:server]
@worker_image_id = @aws.default_amis[:worker]
error(1, 'Could not find stable AMIs') unless @server_image_id && @worker_image_id

begin
  # This will create a logger in addition to the AWS logger which is the same file
  @logger = Logger.new(File.expand_path('~/.aws.log'))
  case ARGV[4]
    when 'describe_availability_zones'
      resp = @aws.describe_availability_zones
      puts resp.to_json
      @logger.info("availability_zones #{resp}")
    when 'total_instances'
      resp = @aws.total_instances_count
      puts resp
      @logger.info("total_instances #{resp}")
    when 'instance_status'
      resp = nil
      if ARGV.length < 6
        resp = @aws.client.describe_instance_status
      else
        resp = @aws.client.describe_instance_status(instance_ids: [@params['instance_id']])
      end
      output = {}
      resp.data[:instance_status_set].each do |instance|
        output[instance[:instance_id]] = instance[:instance_state][:name]
      end
      puts output.to_json
    when 'launch_server'
      error(-1, 'Invalid number of args') if ARGV.length < 6

      @timestamp = Time.now.to_i

      server_options = {
          instance_type: @params['instance_type'],
          image_id: @server_image_id
      }

      # Create the server & worker
      @aws.create_server server_options
      @aws.save_cluster_info 'replace_me_somewhere.json'

      puts @aws.cluster_info

    # TODO: OpenStudio needs the private key (the file or the key????) as well in the JSON
    # puts ({timestamp: @timestamp,
    #        private_key: @private_key,
    #        server: {
    #            id: @server.id,
    #            ip: 'http://' + @server.ip,
    #            dns: @server.dns,
    #            procs: @server.procs,
    #            availability_zone: @server.availability_zone
    #        }}.to_json)

    when 'launch_workers'
      error(-1, 'Invalid number of args') if ARGV.length < 6
      unless @params.key? 'num'
        error(-1, 'Number of worker nodes not specified. Must be greater than or equal to 0')
      end

      worker_options = {
          instance_type: @params['instance_type'],
          image_id: @worker_image_id
      }

      # Load in the Server information from disk
      @aws.load_instance_info_from_file 'replace_me_somewhere.json'

      # Create the worker node
      @aws.create_workers @params['num'], worker_options
    when 'terminate_session'
      error(-1, 'Invalid number of args') if ARGV.length < 6

      @aws.load_instance_info_from_file 'replace_me_somewhere.json'
      @aws.terminate

      # When session is fully terminated, then delete the key pair

      puts ({terminate_session: true}.to_json)

    when 'termination_status'
      error(-1, 'Invalid number of args') if ARGV.length < 6

      @aws.load_instance_info_from_file 'replace_me_somewhere.json'

      instances = @aws.describe_instances

      not_terminated = 0
      instances.each do |instance|
        not_terminated += 1 unless instance[:state][:name] == 'terminated'
      end

      # if everything has terminated, then clean up the AWS keys and the local disk
      if not_terminated == 0
        @aws.delete_key_pair

        # remove all the files
        File.delete 'replace_me_somewhere.json' if File.exist? 'replace_me_somewhere.json'
        File.delete 'ec2_server_key.pem' if File.exist? 'ec2_server_key.pem'
        File.delete 'ec2_worker_key.pub' if File.exist? 'ec2_worker_key.pub'
        File.delete 'ec2_worker_key.pem' if File.exist? 'ec2_worker_key.pem'
      end

      puts ({all_instances_terminated: (not_terminated == 0)}.to_json)

    when 'session_uptime'
      error(-1, 'Invalid number of args') if ARGV.length < 6

      @aws.load_instance_info_from_file 'replace_me_somewhere.json'

      require 'pp'
      pp @aws

      minutes = 0
      if @aws.server
        minutes = (Time.now.to_i - @aws.server.data['launch_time'].to_i) / 60
      end

      puts ({session_uptime: minutes}.to_json)

    when 'estimated_charges'
      require 'pp'
      datapoints = @aws.estimated_charges
      error(-1, 'No Billing Data') if datapoints.length == 0
      datapoints.sort! { |a, b| a[:timestamp] <=> b[:timestamp] }
      puts ({estimated_charges: datapoints[-1][:maximum],
             timestamp: datapoints[-1][:timestamp].to_i}.to_json)
    else
      error(-1, "Unknown command: #{ARGV[4]} (#{ARGV[3]})")
  end
# puts \"Status: #{resp.http_response.status}\"
rescue SystemExit => e
rescue Exception => e
  if e.message == 'getaddrinfo: No such host is known. '
    error(503, 'Offline')
  elsif defined? e.http_response
    error(e.http_response.status, e.code)
  else
    error(-1, "#{e}: #{e.backtrace}")
  end
end
