/***********************************************************************************************************************
 *  OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC. All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *  following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote
 *  products derived from this software without specific prior written permission from the respective party.
 *
 *  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative
 *  works may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without
 *  specific prior written permission from Alliance for Sustainable Energy, LLC.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **********************************************************************************************************************/

#ifndef RUNMANAGER_LIB_PROCESS_HPP
#define RUNMANAGER_LIB_PROCESS_HPP

#include <string>
#include "FileInfo.hpp"
#include "AdvancedStatus.hpp"
#include <QProcess>

namespace openstudio {
namespace runmanager {

  /// Base class for local processes
  class Process : public QObject
  {
    Q_OBJECT;

    public:
      Process();
      virtual ~Process() {}

      /// Requests that the process start
      virtual void start() = 0;

      /// Blocks until the process has finished
      virtual void waitForFinished() = 0;

      /// \returns true if the process is running or starting up
      virtual bool running() const = 0;

      /// Removes the vector of output file names passed in from the output directory
      virtual void cleanup(const std::vector<std::string> &t_files) = 0;

      /// \returns the vector of outputFiles generated by the process
      virtual std::vector<FileInfo> outputFiles() const = 0;

      /// \returns the vector of input files used by the Process.
      virtual std::vector<FileInfo> inputFiles() const = 0;

      /// \returns the current status of the Process
      openstudio::runmanager::AdvancedStatus status() const;

      /// \returns True if stop() has been called;
      bool stopped() const;

      /// request that the process stop
      void stop(); 

      /// Request that the process clean up files which were copied into the run directory
      /// because the were required to run the process but are no longer necessary now that
      /// the process has completed.
      virtual void cleanUpRequiredFiles()=0;

    protected:
      /// Emit the outputFileChanged(const openstudio::runmanager::FileInfo&) signal
      void emitOutputFileChanged(const openstudio::runmanager::FileInfo &file);

      /// Emit the statusChanged signal
      void emitStatusChanged(const openstudio::runmanager::AdvancedStatus &status);

      /// request that the process stop
      virtual void stopImpl() = 0;


    signals:
      /// Emitted when the process is fully running
      void started();

      /// Emitted after an output file has changed
      void outputFileChanged(const openstudio::runmanager::FileInfo &file);

      /// Emitted after stdout data has been created
      void standardOutDataAdded(const std::string &data);

      /// Emitted after stderr data has been created
      void standardErrDataAdded(const std::string &data);

      /// Emitted if a process error occurs
      void error(QProcess::ProcessError);

      /// Emitted if a process error occurs, with extra description of error
      void error(QProcess::ProcessError, const std::string &description);


      /// Emitted after the process has finished
      void finished(int exitcode, QProcess::ExitStatus);

      /// Emitted whenever the status changes
      void statusChanged(const openstudio::runmanager::AdvancedStatus &s);

    private:
      REGISTER_LOGGER("openstudio.runmanager.Process");


      /// The status of the Process. Defaults to "Idle"
      openstudio::runmanager::AdvancedStatus m_status;


      /// True if the process has been stopped
      bool m_stopped;
  };


}
}

#endif // RUNMANAGER_LIB_PROCESS_HPP
