/***********************************************************************************************************************
 *  OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC. All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *  following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote
 *  products derived from this software without specific prior written permission from the respective party.
 *
 *  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative
 *  works may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without
 *  specific prior written permission from Alliance for Sustainable Energy, LLC.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **********************************************************************************************************************/

#ifndef ANALYSISDRIVER_CURRENTANALYSIS_HPP
#define ANALYSISDRIVER_CURRENTANALYSIS_HPP

#include "AnalysisDriverAPI.hpp"

#include "../utilities/core/Logger.hpp"

#include <boost/optional.hpp>

#include <vector>

namespace openstudio {

namespace runmanager {
  struct JobErrors;
}

namespace analysis {
  class Analysis;
}

namespace analysisdriver {

class AnalysisRunOptions;

namespace detail {

  class CurrentAnalysis_Impl;
  class AnalysisDriver_Impl;

} // detail

/** CurrentAnalysis stores information about an analysis::Analysis being run or ran by
 *  AnalysisDriver. */
class ANALYSISDRIVER_API CurrentAnalysis {
 public:
  /** @name Constructors and Destructors */
  //@{

  CurrentAnalysis(const analysis::Analysis& analysis,
                  const AnalysisRunOptions& runOptions);

  virtual ~CurrentAnalysis() {}

  //@}
  /** @name Getters */
  //@{

  analysis::Analysis analysis() const;

  AnalysisRunOptions runOptions() const;

  //@}
  /** @name Queries */
  //@{

  /** Returns the number of runmanager::Jobs currently being monitored for this analysis by
   *  AnalysisDriver */
  int numQueuedJobs() const;

  /** Returns the number of runmanager::Jobs currently being monitored for this analysis by
   *  AnalysisDriver that originated from a call to Analysis::addDataPoint or
   *  OpenStudioAlgorithm::createNextIteration. */
  int numQueuedOSJobs() const;

  /** Returns the number of runmanager::Jobs currently being monitored for this analysis by
   *  AnalysisDriver that originated from a call to Dakota. */
  int numQueuedDakotaJobs() const;

  /** Returns numJobsInIteration() - numQueuedJobs(). */
  int numCompletedJobsInOSIteration() const;

  /** Returns number of failed jobs. */
  int numFailedJobsInOSIteration() const;

  /** Returns the total number of runmanager::Jobs that need to be queued and simulated to
   *  complete the current OpenStudio iteration. (All data points already present from calling
   *  Analysis::addDataPoint or OpenStudioAlgorithm::createNextIteration.) */
  int totalNumJobsInOSIteration() const;

  /** Returns the JobErrors generated by the DAKOTA job, if applicable and the DAKOTA job has
   *  finished. */
  boost::optional<runmanager::JobErrors> dakotaJobErrors() const;

  /** Returns true if this and other are the exact same object, that is, if they share data. */
  bool operator==(const CurrentAnalysis& other) const;

  /** Negation of operator==. */
  bool operator!=(const CurrentAnalysis& other) const;

  //@}
  /** @name Run Management */
  //@{

  /// Connect signal from this CurrentAnalysis implementation object to slot on qObject.
  bool connect(const std::string& signal,
               const QObject* qObject,
               const std::string& slot,
               Qt::ConnectionType type = Qt::AutoConnection) const;

  void moveToThread(QThread* targetThread);

  //@}
 protected:
  /** Get the impl pointer. */
  std::shared_ptr<detail::CurrentAnalysis_Impl> getImpl() const;

  /// @cond
  typedef detail::CurrentAnalysis_Impl ImplType;

  friend class detail::CurrentAnalysis_Impl;
  friend class detail::AnalysisDriver_Impl;

  explicit CurrentAnalysis(std::shared_ptr<detail::CurrentAnalysis_Impl> impl);
  /// @endcond

 private:
  std::shared_ptr<detail::CurrentAnalysis_Impl> m_impl;

  REGISTER_LOGGER("openstudio.analysisdriver.CurrentAnalysis");
};

/** \relates CurrentAnalysis*/
typedef boost::optional<CurrentAnalysis> OptionalCurrentAnalysis;

/** \relates CurrentAnalysis*/
typedef std::vector<CurrentAnalysis> CurrentAnalysisVector;

} // analysisdriver
} // openstudio

#endif // ANALYSISDRIVER_CURRENTANALYSIS_HPP

