/***********************************************************************************************************************
 *  OpenStudio(R), Copyright (c) 2008-2016, Alliance for Sustainable Energy, LLC. All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without modification, are permitted provided that the
 *  following conditions are met:
 *
 *  (1) Redistributions of source code must retain the above copyright notice, this list of conditions and the following
 *  disclaimer.
 *
 *  (2) Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the
 *  following disclaimer in the documentation and/or other materials provided with the distribution.
 *
 *  (3) Neither the name of the copyright holder nor the names of any contributors may be used to endorse or promote
 *  products derived from this software without specific prior written permission from the respective party.
 *
 *  (4) Other than as required in clauses (1) and (2), distributions in any form of modifications or other derivative
 *  works may not use the "OpenStudio" trademark, "OS", "os", or any other confusingly similar designation without
 *  specific prior written permission from Alliance for Sustainable Energy, LLC.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
 *  INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 *  DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER, THE UNITED STATES GOVERNMENT, OR ANY CONTRIBUTORS BE LIABLE FOR
 *  ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 *  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED
 *  AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 **********************************************************************************************************************/

#ifndef ANALYSISDRIVER_CURRENTANALYSIS_IMPL_HPP
#define ANALYSISDRIVER_CURRENTANALYSIS_IMPL_HPP

#include "AnalysisDriverAPI.hpp"
#include "AnalysisRunOptions.hpp"
#include "AnalysisDriver_Impl.hpp"

#include "../analysis/Analysis.hpp"
#include "../analysis/DataPoint.hpp"

#include <QObject>

namespace openstudio {

namespace runmanager {
  class RunManager;
}

namespace analysisdriver {

class CurrentAnalysis;

namespace detail {

  bool jobUUIDsEqual(const analysis::DataPoint& dataPoint, const openstudio::UUID& job);

  bool dataPointsEqual(const analysis::DataPoint& dataPoint1, const analysis::DataPoint& dataPoint2);

  /** CurrentAnalysis_Impl is the implementation class for CurrentAnalysis.*/
  class ANALYSISDRIVER_API CurrentAnalysis_Impl : public QObject, public std::enable_shared_from_this<CurrentAnalysis_Impl> {
    Q_OBJECT;
   public:
    /** @name Constructors and Destructors */
    //@{

    CurrentAnalysis_Impl(const analysis::Analysis& analysis,
                         const AnalysisRunOptions& runOptions);

    virtual ~CurrentAnalysis_Impl() {}

    //@}
    /** @name Getters */
    //@{

    analysis::Analysis analysis() const;

    AnalysisRunOptions runOptions() const;

    /** Get a public object that wraps this impl.*/
    CurrentAnalysis currentAnalysis() const;

    //@}
    /** @name Queries */
    //@{

    /** Returns the number of runmanager::Jobs currently being monitored for this analysis by
     *  AnalysisDriver */
    int numQueuedJobs() const;

    int numQueuedOSJobs() const;

    int numQueuedDakotaJobs() const;

    int numCompletedJobsInOSIteration() const;

    int numFailedJobsInOSIteration() const;

    int totalNumJobsInOSIteration() const;

    /** Returns the JobErrors generated by the DAKOTA job, if applicable and the DAKOTA job has
     *  finished. */
    boost::optional<runmanager::JobErrors> dakotaJobErrors() const;

    //@}
   signals:

    void iterationProgress(int numCompletedJobs,int numJobsInIteration);

   protected:

    /** @name Run Management */
    //@{

    friend class detail::AnalysisDriver_Impl;

    // OS ITERATION

    void setNumOSJobsInIteration(int numJobs);

    // DAKOTA

    bool dakotaStarted() const;

    boost::optional<openstudio::UUID> dakotaJob() const;

    void setDakotaJob(const openstudio::UUID& dakotaJob);

    void clearDakotaJob(const runmanager::JobErrors& dakotaJobErrors);

    // DATA POINTS

    bool isQueuedDataPoint(const openstudio::UUID& job) const;

    bool isQueuedOSDataPoint(const openstudio::UUID& job) const;

    bool isQueuedDakotaDataPoint(const openstudio::UUID& job) const;

    boost::optional<analysis::DataPoint> isQueuedDataPoint(const analysis::DataPoint& dataPoint) const;

    boost::optional<analysis::DataPoint> isQueuedOSDataPoint(const analysis::DataPoint& dataPoint) const;

    boost::optional<analysis::DataPoint> isQueuedDakotaDataPoint(const analysis::DataPoint& dataPoint) const;

    void addNextBatchOSDataPoints(const std::vector<analysis::DataPoint>& nextBatchJobs);

    void addDakotaDataPoint(const analysis::DataPoint& newJob);

    void augmentQueuedDakotaDataPoint(const analysis::DataPoint& dataPoint,
                                      const openstudio::path& dakotaParametersFile);

    /** Returns the OpenStudio DataPoint that corresponds to completedJob, and erases it
     *  from the list of jobs to watch. */
    analysis::DataPoint removeCompletedOSDataPoint(const openstudio::UUID& completedJob);

    /** Returns the Dakota DataPoint that corresponds to completedJob, and erases it
     *  from the list of jobs to watch. */
    analysis::DataPoint removeCompletedDakotaDataPoint(const openstudio::UUID& completedJob);

    // START!

    void start(runmanager::RunManager& runManager);

    // STOP!

    void stop(runmanager::RunManager& runManager);

    void stopQueuedDakotaJobs(runmanager::RunManager& runManager);

    void stop(analysis::DataPoint& dataPoint,runmanager::RunManager& runManager);

    //@}
   private:
    REGISTER_LOGGER("openstudio.analysisdriver.CurrentAnalysis");

    analysis::Analysis m_analysis;
    AnalysisRunOptions m_runOptions;

    int m_numOSJobsInIteration;
    int m_numOSJobsComplete;
    int m_numOSJobsFailed;
    std::vector<analysis::DataPoint> m_queuedOSDataPoints;

    bool m_dakotaStarted;
    boost::optional<openstudio::UUID> m_dakotaJob;
    boost::optional<runmanager::JobErrors> m_dakotaJobErrors;
    std::vector<analysis::DataPoint> m_queuedDakotaDataPoints;
  };

} // detail

} // analysisdriver
} // openstudio

#endif // ANALYSISDRIVER_CURRENTANALYSIS_IMPL_HPP

