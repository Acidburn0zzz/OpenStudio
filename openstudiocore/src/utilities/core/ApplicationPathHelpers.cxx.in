/**********************************************************************
*  Copyright (c) 2008-2016, Alliance for Sustainable Energy.
*  All rights reserved.
*
*  This library is free software; you can redistribute it and/or
*  modify it under the terms of the GNU Lesser General Public
*  License as published by the Free Software Foundation; either
*  version 2.1 of the License, or (at your option) any later version.
*
*  This library is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
*  Lesser General Public License for more details.
*
*  You should have received a copy of the GNU Lesser General Public
*  License along with this library; if not, write to the Free Software
*  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
**********************************************************************/

#include <utilities/core/ApplicationPathHelpers.hpp>
#include <utilities/core/Application.hpp>
#include <utilities/core/PathHelpers.hpp>

#include <OpenStudio.hxx>

#include <QCoreApplication>
#include <QStandardPaths>
#include <sstream>
#include <boost/algorithm/string/case_conv.hpp>
#include <iostream>


  bool pathBeginsWith(const openstudio::path &t_shorter, const openstudio::path &t_longer)
  {
    openstudio::path::const_iterator begin1 = t_shorter.begin();
    openstudio::path::const_iterator end1 = t_shorter.end();

    openstudio::path::const_iterator begin2 = t_longer.begin();
    openstudio::path::const_iterator end2 = t_longer.end();

    if (std::distance(begin1, end1) > std::distance(begin2, end2))
    {
      return false; // the run dir has fewer elements than the build dir - cannot be running from builddir
    }

    // if the rundir begins with the builddir, we know it's running from the builddir
    return std::equal(begin1, end1, begin2);

  }


namespace openstudio {

  openstudio::path getApplicationSourceDirectory() {
    return openstudio::toPath("${CMAKE_SOURCE_DIR}");
  }

  openstudio::path getApplicationBuildDirectory() {
    return openstudio::toPath("${CMAKE_BINARY_DIR}");
  }

  openstudio::path getApplicationRunDirectory() {
    if (openstudio::Application::instance().hasApplication()){
      return openstudio::toPath(QCoreApplication::applicationDirPath());
    }
    return openstudio::path();
  }

  bool applicationIsRunningFromBuildDirectory()
  {
#ifdef Q_OS_WIN
    openstudio::path buildDir = openstudio::toPath(boost::algorithm::to_upper_copy(openstudio::toString(getApplicationBuildDirectory())));
    openstudio::path runDir = openstudio::toPath(boost::algorithm::to_upper_copy(openstudio::toString(getApplicationRunDirectory())));
#else
    openstudio::path buildDir = getApplicationBuildDirectory();
    openstudio::path runDir = getApplicationRunDirectory();
#endif

    return pathBeginsWith(buildDir, runDir);
  }

  openstudio::path getEnergyPlusDirectory() {
    return getEnergyPlusExecutable().parent_path();
  }

  openstudio::path getEnergyPlusExecutable() {
    
    openstudio::path cmakeEnergyPlusPath = openstudio::toPath("${ENERGYPLUS_EXE}");
    openstudio::path cmakeEnergyPlusDirectory = cmakeEnergyPlusPath.parent_path();

    // handle developer case first
    if (applicationIsRunningFromBuildDirectory()){
      if( openstudio::filesystem::exists(cmakeEnergyPlusPath) ){
        return cmakeEnergyPlusPath;
      }
    }

    // next check environment variable
    auto envPathString = std::getenv("ENERGYPLUS_EXE_PATH");
    if( envPathString ) {
      openstudio::path envPath = openstudio::toPath(envPathString);
      if( openstudio::filesystem::exists(envPath) ) {
        return envPath;
      }
    }

    // next check for installed energyplus
    if (openstudio::Application::instance().hasApplication()){
      QStringList paths;
      paths << QCoreApplication::applicationDirPath() + QString("/../EnergyPlus/energyplus");
      QString energyPlusExePath = QStandardPaths::findExecutable("energyplus", paths);
      if (!energyPlusExePath.isEmpty()){
        openstudio::path installPath = openstudio::toPath(energyPlusExePath);
        if( openstudio::filesystem::exists(installPath) ) {
          return installPath;
        }
      } 
    }

    // next check default location
    openstudio::path energyPlusExeName = cmakeEnergyPlusPath.filename();
    openstudio::path energyPlusDirectoryName = cmakeEnergyPlusDirectory.filename();

  #ifdef Q_OS_LINUX
    auto systemPath = openstudio::toPath("/usr/local") / energyPlusDirectoryName / energyPlusExeName;
  #elif defined(Q_OS_MAC)
    auto systemPath = openstudio::toPath("/Applications") / energyPlusDirectoryName / energyPlusExeName;
  #else
    auto systemPath = openstudio::toPath("C:/") / energyPlusDirectoryName / energyPlusExeName;
  #endif

    if( openstudio::filesystem::exists(systemPath) ) {
      return systemPath;
    }

    // next check user path
    //QString userPath = QStandardPaths::findExecutable("energyplus");
    //if (!userPath.isEmpty()){
    //  openstudio::path path = openstudio::toPath(userPath);
    //  if( openstudio::filesystem::exists(path) ) {
    //    return path;
    //  }
    //}
    
    return openstudio::path();
  }

  boost::optional<openstudio::path> getRadianceDirectory() {
    openstudio::path cmakeRadianceDirectory = openstudio::toPath("${RADIANCE_LOCATION}");
    openstudio::path radianceDirectoryName;
    if (!cmakeRadianceDirectory.empty()){
      radianceDirectoryName = cmakeRadianceDirectory.filename();
    }

    openstudio::path result;

    if (applicationIsRunningFromBuildDirectory())
    {
      result = cmakeRadianceDirectory;
    } else {
  #ifdef Q_OS_LINUX
      result = getApplicationInstallDirectory() / openstudio::toPath("share/openstudio-" + openStudioVersion()) / radianceDirectoryName;
  #elif defined(Q_OS_MAC)
      result = getApplicationRunDirectory().parent_path().parent_path().parent_path() / openstudio::toPath("sharedresources") / radianceDirectoryName;
  #else
      result = getApplicationRunDirectory().parent_path() / openstudio::toPath("share/openstudio") / radianceDirectoryName;
  #endif
    }

    if (exists(result)){
      return result;
    }

    return boost::none;
  }

} // openstudio
